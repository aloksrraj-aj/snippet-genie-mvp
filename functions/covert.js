// This is the serverless function that converts cURL
// We are using a simplified logic here. For real-world, we would use a library like 'curlconverter' or 'curl-to-go'

exports.handler = async (event, context) => {
    // Only allow POST requests (for security and logic)
    if (event.httpMethod !== "POST") {
        return { statusCode: 405, body: "Method Not Allowed" };
    }

    try {
        const data = JSON.parse(event.body);
        const { curlInput, targetLang } = data;

        if (!curlInput || !targetLang) {
            return { statusCode: 400, body: JSON.stringify({ error: "Missing cURL input or target language." }) };
        }

        // --- Simulated Conversion Logic (To be replaced by real logic later) ---
        // Since we cannot easily install external npm modules in a simple Netlify function without proper setup, 
        // we simulate the conversion response for the current MVP.

        let generatedSnippet = ``;
        
        switch (targetLang) {
            case 'python':
                generatedSnippet = `# Python Requests snippet generated by Snippet Genie\nimport requests\n\nurl = 'YOUR_URL_HERE'\nheaders = {'User-Agent': 'SnippetGenie'}\nresponse = requests.get(url, headers=headers)\nprint(response.text)`;
                break;
            case 'nodejs':
                generatedSnippet = `// Node.js Fetch snippet generated by Snippet Genie\nconst fetch = require('node-fetch');\n\nasync function fetchData() {\n  const response = await fetch('YOUR_URL_HERE');\n  const data = await response.json();\n  console.log(data);\n}\nfetchData();`;
                break;
            case 'go':
                generatedSnippet = `// Go (net/http) snippet generated by Snippet Genie\n// This requires external library to properly parse cURL\n// For now, please refer to the documentation.`;
                break;
            default:
                generatedSnippet = `Error: Unsupported language selected.`;
        }
        
        // Final Response to the client (app.js)
        return {
            statusCode: 200,
            body: JSON.stringify({ snippet: generatedSnippet })
        };

    } catch (error) {
        console.error("Function Error:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: "Internal Server Error during conversion." })
        };
    }
};